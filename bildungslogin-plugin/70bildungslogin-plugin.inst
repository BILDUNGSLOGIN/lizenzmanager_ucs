#!/bin/sh

# Copyright 2021 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

## joinscript api: bindpwdfile

VERSION=9

. /usr/share/univention-lib/all.sh
. /usr/share/univention-join/joinscripthelper.lib

joinscript_init

if  ! univention-app status ucsschool-apis 1>/dev/null 2>/dev/null; then
    echo "ERROR: -------------------------------------------------------------------------"
    echo "ERROR: The app 'UCS@school APIs' (ucsschool-apis) has to be installed."
    echo "ERROR: Please install the app manually."
    echo "ERROR: -------------------------------------------------------------------------"
    exit 1
fi

eval "$(ucr shell ldap/base appcenter/apps/ucsschool-apis/hostdn appcenter/apps/ucsschool-apis/container)"

API_ACCESS_USER="bildungslogin-api-user"
SETTINGS_FILE="/etc/ucsschool/apis/bildungslogin/settings.json"

# Added for new API version 1.0.x which provides different auth mechanisms
PLUGIN_NAME=bildungslogin
API_CONFIG_FILE=/etc/ucsschool/apis/settings.json

create_settings_file() {
  if [ ! -f $SETTINGS_FILE ]; then
    echo "Creating empty settings file '$SETTINGS_FILE'..."
    echo '{}' > $SETTINGS_FILE
    chown root:root $SETTINGS_FILE
    chmod 640 $SETTINGS_FILE
  fi
}

set_ucrvs() {
  if ! docker exec $appcenter_apps_ucsschool_apis_container /usr/bin/test -x /usr/local/bin/univention-config-registry; then
    echo "Installing UCR into Docker container..."
    docker exec $appcenter_apps_ucsschool_apis_container python3 -m pip install --no-cache-dir --compile -i https://test.pypi.org/simple/ univention-config-registry || die
    docker exec $appcenter_apps_ucsschool_apis_container ln -sv /usr/local/bin/univention-config-registry /usr/local/bin/ucr || die
  fi

  echo "Setting UCRVs..."
  docker exec $appcenter_apps_ucsschool_apis_container univention-config-registry set \
    ucsschool/ldap/default/container/class="$(ucr get ucsschool/ldap/default/container/class)" \
    ucsschool/ldap/default/container/pupils="$(ucr get ucsschool/ldap/default/container/pupils)" || true
  echo "Ignore error message above: 'E: your request could not be fulfilled'."
}

check_ucsschoolsapis_version() {
  echo "Checking for correct UCS@Schools- API version"
  ucsschoolsapis_version=`ucr get appcenter/apps/ucsschool-apis/version`
  if [ -n "$ucsschoolsapis_version" ]; then
    if dpkg --compare-versions $ucsschoolsapis_version ge '1.0.0' ; then
      echo "UCS@Schools- API is the correct version"
    else
      echo "Incorrect UCS@Schools- API installed: please install at least version 1.0.0 !"
      die
    fi
  else
    echo "UCS@Schools- API seems not to be installed: please install version 1.0.0 or later !"
    die
  fi
}
setup_provisioning_api_access() {
  echo "Creating user '$API_ACCESS_USER' to allow access to the Bildungslogin Provisioning API..."
  echo "The user will be created deactivated and with a random password."
  univention-directory-manager users/user create "$@" --ignore_exists \
    --position "cn=users,$ldap_base" \
    --set username="$API_ACCESS_USER" \
    --set firstname="Bildungslogin" \
    --set lastname="API user" \
    --set description="Account that is allowed to access the Bildungslogin Provisioning API." \
    --set password="$(makepasswd --chars=20)" \
    --set disabled=1 || die

    echo "Setting object flag hidden to $API_ACCESS_USER"
    univention-directory-manager users/user modify "$@" \
      --dn "uid=$API_ACCESS_USER,cn=users,$ldap_base" \
      --set objectFlag="hidden"

}

enable_ucsschool_apis_plugin() {
  echo "Enabling 'bildungslogin' plugin for ucsschool-apis..."
  python -c '
import json
conf = json.load(open("/etc/ucsschool/apis/settings.json"))
enabled_plugins = set(conf["enabled_plugins"])
enabled_plugins.add("auth")
enabled_plugins.add("bildungslogin")
conf["enabled_plugins"] = sorted(enabled_plugins)
json.dump(conf, open("/etc/ucsschool/apis/settings.json", "w"))
' || die
}

register_idp_in_ucsschool_api() {
  # API_CONFIG_FILE = the config file, usually /etc/school/apis/settings.json
  # BILO_IDP = a symbolic name for the config stanza
  # PLUGIN_NAME = our own plugin name = 'bildungslogin' (used as verbatim string everywhere)
  # AUTH_TAG = how do we identify ourselves against the api, also use 'bildungslogin'
  local API_CONFIG_FILE=/etc/ucsschool/apis/settings.json
  local BILO_IDP='bildungslogin'
  local PLUGIN_NAME='bildungslogin'
  local AUTH_TAG='bildungslogin'

  echo "Adding Bildungslogin IDP to API config file"
  add_idp_in_ucsschool_apis "${BILO_IDP}" '{"strategy": "local_secret", "settings": {}}' $API_CONFIG_FILE

  echo "Add auth tag mapping to API config file"
  add_auth_tag_mapping_in_ucsschool_apis "${AUTH_TAG}" "${BILO_IDP}" ${API_CONFIG_FILE}
}

add_idp_in_ucsschool_apis() {
  local idp_name="${1:-}" idp_value="${2:-}" path="${3:-}"
  python -c "
import json
idp_conf = json.loads('$idp_value')
with open('$path', 'r') as fd:
  conf = json.load(fd)
auth_conf = conf.get('auth', {})
auth_conf['idps'] = auth_conf.get('idps', {})
auth_conf['idps']['$idp_name'] = idp_conf
conf['auth'] = auth_conf
with open('$path',  'w') as fd:
  json.dump(conf, fd, indent=4)
"
}

add_auth_tag_mapping_in_ucsschool_apis() {
  local tag="${1:-}" idp_name="${2:-}" path="${3:-}"
  python -c "
import json
with open('$path', 'r') as fd:
  conf = json.load(fd)
auth_conf = conf.get('auth', {})
auth_conf['tag_idp_mapping'] = auth_conf.get('tag_idp_mapping', {})
current_idps = set(auth_conf['tag_idp_mapping'].get('$tag', []))
current_idps.add('$idp_name')
auth_conf['tag_idp_mapping']['$tag'] = list(current_idps)
conf['auth'] = auth_conf
with open('$path', 'w') as fd:
  json.dump(conf, fd, indent=4)
"
}

ucsschool_api_cache_build_and_init_ucr_vars() {
    echo "Initializing UCR variables for refresh/rebuild cron jobs"
    ucr set bildungslogin/rebuild-cache?'0 5 * * *'
    ucr set bildungslogin/refresh-cache?'after-rebuild'
    ucr set bildungslogin/get-metadata?'0 4 * * *'
    ucr set bildungslogin/update-license-status?'0 2 * * *'
    ucr set bildungslogin/use-deactivated-users?'false'
}

restart_ucsschool_apis_app() {
  echo "Restarting the UCS@school APIs app..."
  univention-app restart ucsschool-apis
}

check_ucsschoolsapis_version
create_settings_file
set_ucrvs
setup_provisioning_api_access "$@"
enable_ucsschool_apis_plugin
register_idp_in_ucsschool_api
ucsschool_api_cache_build_and_init_ucr_vars
restart_ucsschool_apis_app

joinscript_save_current_version

exit 0
